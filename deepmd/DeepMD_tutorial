#----------------------------------DATA PREPARATION ----------------------------------------#

import os

# Define the dataset URL and the paths
dataset_url = "https://bohrium-api.dp.tech/ds-dl/DeePMD-kit-Tutorial-a8z5-v1.zip"
zip_file_name = "DeePMD-kit-Tutorial-a8z5-v1.zip"
dataset_directory = "DeePMD-kit_Tutorial"
local_zip_path = f"/personal/{zip_file_name}"
extract_path = "/personal/"

# Check if the dataset directory exists to avoid re-downloading and re-extracting
if not os.path.isdir(f"{extract_path}{dataset_directory}"):
    # Download and extract if not exists
    if not os.path.isfile(local_zip_path):
        print("Downloading dataset...")
        !wget -q -O {local_zip_path} {dataset_url}

    print("Extracting dataset...")
    !unzip -q -n {local_zip_path} -d {extract_path}
else:
    print("Dataset is already downloaded and extracted.")

# Change the current working directory
os.chdir(f"{extract_path}")
print(f"Current path is: {os.getcwd()}")

#DeePMD-kit uses a compressed data format. All training data should first be converted into this format 
#before they can be used in DeePMD-kit. 


#We provide a convenient tool dpdata, which can convert data generated by VASP, CP2K, Gaussian, Quantum Espresso, 
# ABACUS, and LAMMPS into DeePMD-kit’s compressed format.

import dpdata
import numpy as np

# load data of abacus/md format
data = dpdata.LabeledSystem("DeePMD-kit_Tutorial/00.data/abacus_md", fmt="abacus/md") #teplace abacus -> lammps
print(f"# the data contains {len(data)} frames")


###A snapshot of a molecular system that contains computational data information is called a frame.
#  A data system comprises many frames sharing the same number of atoms and atom types.

# random choose 40 index for validation_data
rng = np.random.default_rng()
index_validation = rng.choice(201, size=40, replace=False)

# other indexes are training_data
index_training = list(set(range(201)) - set(index_validation))
data_training = data.sub_system(index_training)
data_validation = data.sub_system(index_validation)

# all training data put into directory:"training_data"
data_training.to_deepmd_npy("DeePMD-kit_Tutorial/00.data/training_data")

# all validation data put into directory:"validation_data"
data_validation.to_deepmd_npy("DeePMD-kit_Tutorial/00.data/validation_data")

print(f"# the training data contains {len(data_training)} frames")
print(f"# the validation data contains {len(data_validation)} frames")


##At his point, in the 00.data folder new files should have been generated, 
# which are the training and validation sets required for Deep Potential training with DeePMD-kit.

#Example

# DeePMD-kit_Tutorial/00.data/training_data
# ├── set.000
# ├── type.raw
# └── type_map.raw

# 1 directory, 2 files


#---------------------------------- INPUT SCRIPT -------------------------------------#
#DeePMD-kit requires a json format file to specify parameters for training.

# Check dargs version and Install
!pip show dargs || pip install --upgrade dargs

# Show input.json
from deepmd.utils.argcheck import gen_args
from dargs.notebook import JSON

with open("./DeePMD-kit_Tutorial/01.train/input.json") as f:
    JSON(f.read(), gen_args())

#In the model section, the parameters of embedding and fitting networks are specified
# "model":{
#     "type_map":    ["H", "C"],                 
#     "descriptor":{
#         "type":            "se_e2_a",          
#         "rcut":            6.00,               #######################
#         "rcut_smth":       0.50,               
#         "sel":             "auto",             
#         "neuron":          [25, 50, 100],       
#         "resnet_dt":       false,
#         "axis_neuron":     16,                  
#         "seed":            1,
#         "_comment":        "that's all"
#         },
#     "fitting_net":{
#         "neuron":          [240, 240, 240],    
#         "resnet_dt":       true,
#         "seed":            1,
#         "_comment":        "that's all"
#     },
#     "_comment":    "that's all"'
# },


#---------------------------------- TRAINING THE MODEL --------------------------------#
! cd DeePMD-kit_Tutorial/01.train/ && dp train input.json




